package com.topcard.dao.player;

import com.topcard.domain.Player;
import java.util.List;
import java.util.Optional;

/**
 * Defines the contract for data access operations related to {@link Player} entities.
 * This interface abstracts the underlying persistence mechanism, allowing the service layer
 * to interact with player data without knowing the specifics of database implementation.
 */
public interface IPlayerDao {

    /**
     * Persists a new player record in the database.
     * The ID of the player will be generated by the persistence layer.
     *
     * @param player The player entity to be added.
     * @return The newly persisted Player entity, including its generated ID, or {@code null} if persistence failed.
     */
    Player addPlayer(Player player);

    /**
     * Retrieves a player from the database by their unique identifier.
     *
     * @param playerId The unique ID of the player.
     * @return An {@link Optional} containing the found {@link Player} entity, or an empty {@link Optional} if no player with the given ID exists.
     */
    Optional<Player> getPlayerById(int playerId);

    /**
     * Retrieves a player from the database by their username.
     * Usernames are expected to be unique.
     *
     * @param username The username of the player.
     * @return An {@link Optional} containing the found {@link Player} entity, or an empty {@link Optional} if no player with the given username exists.
     */
    Optional<Player> getPlayerByUsername(String username);

    /**
     * Updates an existing player's record in the database.
     *
     * @param player The player entity with updated information. The {@code playerId} must be present.
     * @return {@code true} if the player was successfully updated; {@code false} otherwise (e.g., player not found).
     */
    boolean updatePlayer(Player player);

    /**
     * Deletes a player record from the database using their unique identifier.
     *
     * @param playerId The unique ID of the player to delete.
     * @return {@code true} if the player was successfully deleted; {@code false} otherwise (e.g., player not found).
     */
    boolean deletePlayer(int playerId);

    /**
     * Retrieves all player records from the database.
     *
     * @return A {@link List} of all {@link Player} entities found in the database. Returns an empty list if no players exist.
     */
    List<Player> getAllPlayers();

    /**
     * Removes all player data from the persistence layer.
     * This method is primarily intended for setup or testing scenarios.
     */
    void deleteAllPlayersData();
}